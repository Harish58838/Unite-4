import sys

def floyd_algorithm(n, edges):
    distance = [[float('inf') for _ in range(n)] for _ in range(n)]
    
    for i in range(n):
        distance[i][i] = 0
    
    for edge in edges:
        distance[edge[0]][edge[1]] = edge[2]
    
    for k in range(n):
        for i in range(n):
            for j in range(n):
                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])
    
    return distance

# Test Case 1
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4

result = floyd_algorithm(n, edges)
print("Distance Matrix:")
for row in result:
    print(row)

# Test Case 2
n = 4
edges = [[1,2,3],[1,3,8],[1,4,-4],[2,4,1],[2,3,4],[3,1,2],[4,3,-5],[4,2,6]]

result = floyd_algorithm(n, edges)
print("\nDistance Matrix:")
for row in result:
    print(row)

print("\nShortest Path from City 1 to City 3:", result[0][2])
