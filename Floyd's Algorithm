import sys

# Number of vertices in the graph
V = 6

# Define infinity as the large enough value
INF = sys.maxsize

# Function to implement Floyd's Algorithm
def floydWarshall(graph):
    dist = list(map(lambda i: list(map(lambda j: j, i)), graph))

    for k in range(V):
        for i in range(V):
            for j in range(V):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist

# Define the graph with distances between routers
graph = [
    [0, 2, 5, INF, INF, INF],
    [INF, 0, 2, 1, INF, INF],
    [INF, INF, 0, 4, 5, INF],
    [INF, INF, INF, 0, 1, 3],
    [INF, INF, INF, INF, 0, 1],
    [INF, INF, INF, INF, INF, 0]
]

# Implementing Floyd's Algorithm
distances = floydWarshall(graph)

# Simulate link failure between Router B and Router D
graph[1][3] = INF
graph[3][1] = INF

# Update distance matrix after link failure
distances_after_failure = floydWarshall(graph)

# Display the shortest path from Router A to Router F before and after link failure
print("Router A to Router F before link failure =", distances[0][5])
print("Router A to Router F after link failure =", distances_after_failure[0][5])
